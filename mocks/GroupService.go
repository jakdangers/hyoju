// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "pixelix/entity"

	mock "github.com/stretchr/testify/mock"
)

// GroupService is an autogenerated mock type for the GroupService type
type GroupService struct {
	mock.Mock
}

type GroupService_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupService) EXPECT() *GroupService_Expecter {
	return &GroupService_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function with given fields: c, req
func (_m *GroupService) CreateGroup(c context.Context, req entity.CreateGroupRequest) error {
	ret := _m.Called(c, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateGroupRequest) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type GroupService_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - c context.Context
//   - req entity.CreateGroupRequest
func (_e *GroupService_Expecter) CreateGroup(c interface{}, req interface{}) *GroupService_CreateGroup_Call {
	return &GroupService_CreateGroup_Call{Call: _e.mock.On("CreateGroup", c, req)}
}

func (_c *GroupService_CreateGroup_Call) Run(run func(c context.Context, req entity.CreateGroupRequest)) *GroupService_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CreateGroupRequest))
	})
	return _c
}

func (_c *GroupService_CreateGroup_Call) Return(_a0 error) *GroupService_CreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_CreateGroup_Call) RunAndReturn(run func(context.Context, entity.CreateGroupRequest) error) *GroupService_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupService creates a new instance of GroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupService {
	mock := &GroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
