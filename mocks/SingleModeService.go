// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SingleModeService is an autogenerated mock type for the SingleModeService type
type SingleModeService struct {
	mock.Mock
}

type SingleModeService_Expecter struct {
	mock *mock.Mock
}

func (_m *SingleModeService) EXPECT() *SingleModeService_Expecter {
	return &SingleModeService_Expecter{mock: &_m.Mock}
}

// CreateMissionHistories provides a mock function with given fields:
func (_m *SingleModeService) CreateMissionHistories() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SingleModeService_CreateMissionHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMissionHistories'
type SingleModeService_CreateMissionHistories_Call struct {
	*mock.Call
}

// CreateMissionHistories is a helper method to define mock.On call
func (_e *SingleModeService_Expecter) CreateMissionHistories() *SingleModeService_CreateMissionHistories_Call {
	return &SingleModeService_CreateMissionHistories_Call{Call: _e.mock.On("CreateMissionHistories")}
}

func (_c *SingleModeService_CreateMissionHistories_Call) Run(run func()) *SingleModeService_CreateMissionHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SingleModeService_CreateMissionHistories_Call) Return(_a0 error) *SingleModeService_CreateMissionHistories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SingleModeService_CreateMissionHistories_Call) RunAndReturn(run func() error) *SingleModeService_CreateMissionHistories_Call {
	_c.Call.Return(run)
	return _c
}

// NewSingleModeService creates a new instance of SingleModeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSingleModeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SingleModeService {
	mock := &SingleModeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
