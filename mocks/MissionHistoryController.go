// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MissionHistoryController is an autogenerated mock type for the MissionHistoryController type
type MissionHistoryController struct {
	mock.Mock
}

type MissionHistoryController_Expecter struct {
	mock *mock.Mock
}

func (_m *MissionHistoryController) EXPECT() *MissionHistoryController_Expecter {
	return &MissionHistoryController_Expecter{mock: &_m.Mock}
}

// CreateMissionHistory provides a mock function with given fields: c
func (_m *MissionHistoryController) CreateMissionHistory(c *gin.Context) {
	_m.Called(c)
}

// MissionHistoryController_CreateMissionHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMissionHistory'
type MissionHistoryController_CreateMissionHistory_Call struct {
	*mock.Call
}

// CreateMissionHistory is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MissionHistoryController_Expecter) CreateMissionHistory(c interface{}) *MissionHistoryController_CreateMissionHistory_Call {
	return &MissionHistoryController_CreateMissionHistory_Call{Call: _e.mock.On("CreateMissionHistory", c)}
}

func (_c *MissionHistoryController_CreateMissionHistory_Call) Run(run func(c *gin.Context)) *MissionHistoryController_CreateMissionHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MissionHistoryController_CreateMissionHistory_Call) Return() *MissionHistoryController_CreateMissionHistory_Call {
	_c.Call.Return()
	return _c
}

func (_c *MissionHistoryController_CreateMissionHistory_Call) RunAndReturn(run func(*gin.Context)) *MissionHistoryController_CreateMissionHistory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMissionHistoryController creates a new instance of MissionHistoryController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMissionHistoryController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MissionHistoryController {
	mock := &MissionHistoryController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
