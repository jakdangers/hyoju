// ServiceCode generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "pixelix/entity"

	mock "github.com/stretchr/testify/mock"
)

// MissionService is an autogenerated mock type for the MissionService type
type MissionService struct {
	mock.Mock
}

type MissionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MissionService) EXPECT() *MissionService_Expecter {
	return &MissionService_Expecter{mock: &_m.Mock}
}

// CreateChallenge provides a mock function with given fields: ctx, req
func (_m *MissionService) CreateChallenge(ctx context.Context, req entity.CreateChallengeRequest) (*entity.CreateMissionResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.CreateMissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateChallengeRequest) (*entity.CreateMissionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateChallengeRequest) *entity.CreateMissionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CreateMissionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateChallengeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionService_CreateMission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChallenge'
type MissionService_CreateMission_Call struct {
	*mock.Call
}

// CreateMission is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.CreateChallengeRequest
func (_e *MissionService_Expecter) CreateMission(ctx interface{}, req interface{}) *MissionService_CreateMission_Call {
	return &MissionService_CreateMission_Call{Call: _e.mock.On("CreateChallenge", ctx, req)}
}

func (_c *MissionService_CreateMission_Call) Run(run func(ctx context.Context, req entity.CreateChallengeRequest)) *MissionService_CreateMission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CreateChallengeRequest))
	})
	return _c
}

func (_c *MissionService_CreateMission_Call) Return(_a0 *entity.CreateMissionResponse, _a1 error) *MissionService_CreateMission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionService_CreateMission_Call) RunAndReturn(run func(context.Context, entity.CreateChallengeRequest) (*entity.CreateMissionResponse, error)) *MissionService_CreateMission_Call {
	_c.Call.Return(run)
	return _c
}

// GetChallenge provides a mock function with given fields: ctx, req
func (_m *MissionService) GetChallenge(ctx context.Context, req entity.GetChallengeRequest) (*entity.GetChallengeResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.GetChallengeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetChallengeRequest) (*entity.GetChallengeResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetChallengeRequest) *entity.GetChallengeResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GetChallengeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.GetChallengeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionService_GetMission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChallenge'
type MissionService_GetMission_Call struct {
	*mock.Call
}

// GetMission is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.GetChallengeRequest
func (_e *MissionService_Expecter) GetMission(ctx interface{}, req interface{}) *MissionService_GetMission_Call {
	return &MissionService_GetMission_Call{Call: _e.mock.On("GetChallenge", ctx, req)}
}

func (_c *MissionService_GetMission_Call) Run(run func(ctx context.Context, req entity.GetChallengeRequest)) *MissionService_GetMission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.GetChallengeRequest))
	})
	return _c
}

func (_c *MissionService_GetMission_Call) Return(_a0 *entity.GetChallengeResponse, _a1 error) *MissionService_GetMission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionService_GetMission_Call) RunAndReturn(run func(context.Context, entity.GetChallengeRequest) (*entity.GetChallengeResponse, error)) *MissionService_GetMission_Call {
	_c.Call.Return(run)
	return _c
}

// ListChallenges provides a mock function with given fields: ctx, req
func (_m *MissionService) ListChallenges(ctx context.Context, req entity.ListChallengesRequest) (*entity.ListChallengesResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.ListChallengesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ListChallengesRequest) (*entity.ListChallengesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ListChallengesRequest) *entity.ListChallengesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ListChallengesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ListChallengesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionService_ListMissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChallenges'
type MissionService_ListMissions_Call struct {
	*mock.Call
}

// ListMissions is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.ListChallengesRequest
func (_e *MissionService_Expecter) ListMissions(ctx interface{}, req interface{}) *MissionService_ListMissions_Call {
	return &MissionService_ListMissions_Call{Call: _e.mock.On("ListChallenges", ctx, req)}
}

func (_c *MissionService_ListMissions_Call) Run(run func(ctx context.Context, req entity.ListChallengesRequest)) *MissionService_ListMissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ListChallengesRequest))
	})
	return _c
}

func (_c *MissionService_ListMissions_Call) Return(_a0 *entity.ListChallengesResponse, _a1 error) *MissionService_ListMissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionService_ListMissions_Call) RunAndReturn(run func(context.Context, entity.ListChallengesRequest) (*entity.ListChallengesResponse, error)) *MissionService_ListMissions_Call {
	_c.Call.Return(run)
	return _c
}

// PatchChallenge provides a mock function with given fields: ctx, req
func (_m *MissionService) PatchChallenge(ctx context.Context, req entity.PatchChallengeRequest) (*entity.PatchChallengeResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.PatchChallengeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.PatchChallengeRequest) (*entity.PatchChallengeResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.PatchChallengeRequest) *entity.PatchChallengeResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PatchChallengeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.PatchChallengeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionService_PatchMission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchChallenge'
type MissionService_PatchMission_Call struct {
	*mock.Call
}

// PatchMission is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.PatchChallengeRequest
func (_e *MissionService_Expecter) PatchMission(ctx interface{}, req interface{}) *MissionService_PatchMission_Call {
	return &MissionService_PatchMission_Call{Call: _e.mock.On("PatchChallenge", ctx, req)}
}

func (_c *MissionService_PatchMission_Call) Run(run func(ctx context.Context, req entity.PatchChallengeRequest)) *MissionService_PatchMission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.PatchChallengeRequest))
	})
	return _c
}

func (_c *MissionService_PatchMission_Call) Return(_a0 *entity.PatchChallengeResponse, _a1 error) *MissionService_PatchMission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionService_PatchMission_Call) RunAndReturn(run func(context.Context, entity.PatchChallengeRequest) (*entity.PatchChallengeResponse, error)) *MissionService_PatchMission_Call {
	_c.Call.Return(run)
	return _c
}

// NewMissionService creates a new instance of MissionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMissionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MissionService {
	mock := &MissionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
