// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "pixelix/entity"

	mock "github.com/stretchr/testify/mock"
)

// ChallengeService is an autogenerated mock type for the ChallengeService type
type ChallengeService struct {
	mock.Mock
}

type ChallengeService_Expecter struct {
	mock *mock.Mock
}

func (_m *ChallengeService) EXPECT() *ChallengeService_Expecter {
	return &ChallengeService_Expecter{mock: &_m.Mock}
}

// CreateChallenge provides a mock function with given fields: c, req
func (_m *ChallengeService) CreateChallenge(c context.Context, req entity.CreateChallengeRequest) (*entity.CreateChallengeResponse, error) {
	ret := _m.Called(c, req)

	var r0 *entity.CreateChallengeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateChallengeRequest) (*entity.CreateChallengeResponse, error)); ok {
		return rf(c, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateChallengeRequest) *entity.CreateChallengeResponse); ok {
		r0 = rf(c, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CreateChallengeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateChallengeRequest) error); ok {
		r1 = rf(c, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChallengeService_CreateChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChallenge'
type ChallengeService_CreateChallenge_Call struct {
	*mock.Call
}

// CreateChallenge is a helper method to define mock.On call
//   - c context.Context
//   - req entity.CreateChallengeRequest
func (_e *ChallengeService_Expecter) CreateChallenge(c interface{}, req interface{}) *ChallengeService_CreateChallenge_Call {
	return &ChallengeService_CreateChallenge_Call{Call: _e.mock.On("CreateChallenge", c, req)}
}

func (_c *ChallengeService_CreateChallenge_Call) Run(run func(c context.Context, req entity.CreateChallengeRequest)) *ChallengeService_CreateChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CreateChallengeRequest))
	})
	return _c
}

func (_c *ChallengeService_CreateChallenge_Call) Return(_a0 *entity.CreateChallengeResponse, _a1 error) *ChallengeService_CreateChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChallengeService_CreateChallenge_Call) RunAndReturn(run func(context.Context, entity.CreateChallengeRequest) (*entity.CreateChallengeResponse, error)) *ChallengeService_CreateChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// NewChallengeService creates a new instance of ChallengeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChallengeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChallengeService {
	mock := &ChallengeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
