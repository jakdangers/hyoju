// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// GroupController is an autogenerated mock type for the GroupController type
type GroupController struct {
	mock.Mock
}

type GroupController_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupController) EXPECT() *GroupController_Expecter {
	return &GroupController_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function with given fields: c
func (_m *GroupController) CreateGroup(c *gin.Context) {
	_m.Called(c)
}

// GroupController_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type GroupController_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - c *gin.Context
func (_e *GroupController_Expecter) CreateGroup(c interface{}) *GroupController_CreateGroup_Call {
	return &GroupController_CreateGroup_Call{Call: _e.mock.On("CreateGroup", c)}
}

func (_c *GroupController_CreateGroup_Call) Run(run func(c *gin.Context)) *GroupController_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *GroupController_CreateGroup_Call) Return() *GroupController_CreateGroup_Call {
	_c.Call.Return()
	return _c
}

func (_c *GroupController_CreateGroup_Call) RunAndReturn(run func(*gin.Context)) *GroupController_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupController creates a new instance of GroupController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupController(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupController {
	mock := &GroupController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
