// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "pixelix/entity"

	mock "github.com/stretchr/testify/mock"
)

// ChallengeHistoryService is an autogenerated mock type for the ChallengeHistoryService type
type ChallengeHistoryService struct {
	mock.Mock
}

type ChallengeHistoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *ChallengeHistoryService) EXPECT() *ChallengeHistoryService_Expecter {
	return &ChallengeHistoryService_Expecter{mock: &_m.Mock}
}

// CreateMissionHistory provides a mock function with given fields: ctx, req
func (_m *ChallengeHistoryService) CreateMissionHistory(ctx context.Context, req entity.CreateMissionHistoryRequest) (*entity.CreateMissionHistoryResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.CreateMissionHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateMissionHistoryRequest) (*entity.CreateMissionHistoryResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateMissionHistoryRequest) *entity.CreateMissionHistoryResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CreateMissionHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateMissionHistoryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChallengeHistoryService_CreateMissionHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMissionHistory'
type ChallengeHistoryService_CreateMissionHistory_Call struct {
	*mock.Call
}

// CreateMissionHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.CreateMissionHistoryRequest
func (_e *ChallengeHistoryService_Expecter) CreateMissionHistory(ctx interface{}, req interface{}) *ChallengeHistoryService_CreateMissionHistory_Call {
	return &ChallengeHistoryService_CreateMissionHistory_Call{Call: _e.mock.On("CreateMissionHistory", ctx, req)}
}

func (_c *ChallengeHistoryService_CreateMissionHistory_Call) Run(run func(ctx context.Context, req entity.CreateMissionHistoryRequest)) *ChallengeHistoryService_CreateMissionHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CreateMissionHistoryRequest))
	})
	return _c
}

func (_c *ChallengeHistoryService_CreateMissionHistory_Call) Return(_a0 *entity.CreateMissionHistoryResponse, _a1 error) *ChallengeHistoryService_CreateMissionHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChallengeHistoryService_CreateMissionHistory_Call) RunAndReturn(run func(context.Context, entity.CreateMissionHistoryRequest) (*entity.CreateMissionHistoryResponse, error)) *ChallengeHistoryService_CreateMissionHistory_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupChallengeHistories provides a mock function with given fields: ctx, req
func (_m *ChallengeHistoryService) ListGroupChallengeHistories(ctx context.Context, req entity.ListGroupChallengeHistoriesRequest) (*entity.ListGroupChallengeHistoriesResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.ListGroupChallengeHistoriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ListGroupChallengeHistoriesRequest) (*entity.ListGroupChallengeHistoriesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ListGroupChallengeHistoriesRequest) *entity.ListGroupChallengeHistoriesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ListGroupChallengeHistoriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ListGroupChallengeHistoriesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChallengeHistoryService_ListGroupChallengeHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupChallengeHistories'
type ChallengeHistoryService_ListGroupChallengeHistories_Call struct {
	*mock.Call
}

// ListGroupChallengeHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.ListGroupChallengeHistoriesRequest
func (_e *ChallengeHistoryService_Expecter) ListGroupChallengeHistories(ctx interface{}, req interface{}) *ChallengeHistoryService_ListGroupChallengeHistories_Call {
	return &ChallengeHistoryService_ListGroupChallengeHistories_Call{Call: _e.mock.On("ListGroupChallengeHistories", ctx, req)}
}

func (_c *ChallengeHistoryService_ListGroupChallengeHistories_Call) Run(run func(ctx context.Context, req entity.ListGroupChallengeHistoriesRequest)) *ChallengeHistoryService_ListGroupChallengeHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ListGroupChallengeHistoriesRequest))
	})
	return _c
}

func (_c *ChallengeHistoryService_ListGroupChallengeHistories_Call) Return(_a0 *entity.ListGroupChallengeHistoriesResponse, _a1 error) *ChallengeHistoryService_ListGroupChallengeHistories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChallengeHistoryService_ListGroupChallengeHistories_Call) RunAndReturn(run func(context.Context, entity.ListGroupChallengeHistoriesRequest) (*entity.ListGroupChallengeHistoriesResponse, error)) *ChallengeHistoryService_ListGroupChallengeHistories_Call {
	_c.Call.Return(run)
	return _c
}

// NewChallengeHistoryService creates a new instance of ChallengeHistoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChallengeHistoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChallengeHistoryService {
	mock := &ChallengeHistoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
