// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "pixelix/entity"

	mock "github.com/stretchr/testify/mock"
)

// MissionParticipantRepository is an autogenerated mock type for the MissionParticipantRepository type
type MissionParticipantRepository struct {
	mock.Mock
}

type MissionParticipantRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MissionParticipantRepository) EXPECT() *MissionParticipantRepository_Expecter {
	return &MissionParticipantRepository_Expecter{mock: &_m.Mock}
}

// CreateMissionParticipant provides a mock function with given fields: ctx, participant
func (_m *MissionParticipantRepository) CreateMissionParticipant(ctx context.Context, participant *entity.MissionParticipant) (*entity.MissionParticipant, error) {
	ret := _m.Called(ctx, participant)

	var r0 *entity.MissionParticipant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MissionParticipant) (*entity.MissionParticipant, error)); ok {
		return rf(ctx, participant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MissionParticipant) *entity.MissionParticipant); ok {
		r0 = rf(ctx, participant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MissionParticipant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.MissionParticipant) error); ok {
		r1 = rf(ctx, participant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionParticipantRepository_CreateMissionParticipant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMissionParticipant'
type MissionParticipantRepository_CreateMissionParticipant_Call struct {
	*mock.Call
}

// CreateMissionParticipant is a helper method to define mock.On call
//   - ctx context.Context
//   - participant *entity.MissionParticipant
func (_e *MissionParticipantRepository_Expecter) CreateMissionParticipant(ctx interface{}, participant interface{}) *MissionParticipantRepository_CreateMissionParticipant_Call {
	return &MissionParticipantRepository_CreateMissionParticipant_Call{Call: _e.mock.On("CreateMissionParticipant", ctx, participant)}
}

func (_c *MissionParticipantRepository_CreateMissionParticipant_Call) Run(run func(ctx context.Context, participant *entity.MissionParticipant)) *MissionParticipantRepository_CreateMissionParticipant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.MissionParticipant))
	})
	return _c
}

func (_c *MissionParticipantRepository_CreateMissionParticipant_Call) Return(_a0 *entity.MissionParticipant, _a1 error) *MissionParticipantRepository_CreateMissionParticipant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionParticipantRepository_CreateMissionParticipant_Call) RunAndReturn(run func(context.Context, *entity.MissionParticipant) (*entity.MissionParticipant, error)) *MissionParticipantRepository_CreateMissionParticipant_Call {
	_c.Call.Return(run)
	return _c
}

// ListMissionParticipants provides a mock function with given fields: ctx, missionID
func (_m *MissionParticipantRepository) ListMissionParticipants(ctx context.Context, missionID uint) ([]entity.MissionParticipant, error) {
	ret := _m.Called(ctx, missionID)

	var r0 []entity.MissionParticipant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]entity.MissionParticipant, error)); ok {
		return rf(ctx, missionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []entity.MissionParticipant); ok {
		r0 = rf(ctx, missionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MissionParticipant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, missionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionParticipantRepository_ListMissionParticipants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMissionParticipants'
type MissionParticipantRepository_ListMissionParticipants_Call struct {
	*mock.Call
}

// ListMissionParticipants is a helper method to define mock.On call
//   - ctx context.Context
//   - missionID uint
func (_e *MissionParticipantRepository_Expecter) ListMissionParticipants(ctx interface{}, missionID interface{}) *MissionParticipantRepository_ListMissionParticipants_Call {
	return &MissionParticipantRepository_ListMissionParticipants_Call{Call: _e.mock.On("ListMissionParticipants", ctx, missionID)}
}

func (_c *MissionParticipantRepository_ListMissionParticipants_Call) Run(run func(ctx context.Context, missionID uint)) *MissionParticipantRepository_ListMissionParticipants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MissionParticipantRepository_ListMissionParticipants_Call) Return(_a0 []entity.MissionParticipant, _a1 error) *MissionParticipantRepository_ListMissionParticipants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionParticipantRepository_ListMissionParticipants_Call) RunAndReturn(run func(context.Context, uint) ([]entity.MissionParticipant, error)) *MissionParticipantRepository_ListMissionParticipants_Call {
	_c.Call.Return(run)
	return _c
}

// NewMissionParticipantRepository creates a new instance of MissionParticipantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMissionParticipantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MissionParticipantRepository {
	mock := &MissionParticipantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
