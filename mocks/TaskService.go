// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "pixelix/entity"

	mock "github.com/stretchr/testify/mock"
)

// TaskService is an autogenerated mock type for the TaskService type
type TaskService struct {
	mock.Mock
}

type TaskService_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskService) EXPECT() *TaskService_Expecter {
	return &TaskService_Expecter{mock: &_m.Mock}
}

// CreateMission provides a mock function with given fields: ctx, req
func (_m *TaskService) CreateMission(ctx context.Context, req dto.CreateMissionRequest) (dto.CreateMissionResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 dto.CreateMissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateMissionRequest) (dto.CreateMissionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateMissionRequest) dto.CreateMissionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.CreateMissionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateMissionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskService_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChallenge'
type TaskService_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.CreateMissionRequest
func (_e *TaskService_Expecter) CreateTask(ctx interface{}, req interface{}) *TaskService_CreateTask_Call {
	return &TaskService_CreateTask_Call{Call: _e.mock.On("CreateChallenge", ctx, req)}
}

func (_c *TaskService_CreateTask_Call) Run(run func(ctx context.Context, req dto.CreateMissionRequest)) *TaskService_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateMissionRequest))
	})
	return _c
}

func (_c *TaskService_CreateTask_Call) Return(_a0 dto.CreateMissionResponse, _a1 error) *TaskService_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskService_CreateTask_Call) RunAndReturn(run func(context.Context, dto.CreateMissionRequest) (dto.CreateMissionResponse, error)) *TaskService_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskService creates a new instance of TaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskService {
	mock := &TaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
