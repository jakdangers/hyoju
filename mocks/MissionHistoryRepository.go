// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "pixelix/entity"

	mock "github.com/stretchr/testify/mock"
)

// MissionHistoryRepository is an autogenerated mock type for the MissionHistoryRepository type
type MissionHistoryRepository struct {
	mock.Mock
}

type MissionHistoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MissionHistoryRepository) EXPECT() *MissionHistoryRepository_Expecter {
	return &MissionHistoryRepository_Expecter{mock: &_m.Mock}
}

// CreateMissionHistory provides a mock function with given fields: ctx, missionHistory
func (_m *MissionHistoryRepository) CreateMissionHistory(ctx context.Context, missionHistory *entity.MissionHistory) (*entity.MissionHistory, error) {
	ret := _m.Called(ctx, missionHistory)

	var r0 *entity.MissionHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MissionHistory) (*entity.MissionHistory, error)); ok {
		return rf(ctx, missionHistory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MissionHistory) *entity.MissionHistory); ok {
		r0 = rf(ctx, missionHistory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MissionHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.MissionHistory) error); ok {
		r1 = rf(ctx, missionHistory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionHistoryRepository_CreateMissionHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMissionHistory'
type MissionHistoryRepository_CreateMissionHistory_Call struct {
	*mock.Call
}

// CreateMissionHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - missionHistory *entity.MissionHistory
func (_e *MissionHistoryRepository_Expecter) CreateMissionHistory(ctx interface{}, missionHistory interface{}) *MissionHistoryRepository_CreateMissionHistory_Call {
	return &MissionHistoryRepository_CreateMissionHistory_Call{Call: _e.mock.On("CreateMissionHistory", ctx, missionHistory)}
}

func (_c *MissionHistoryRepository_CreateMissionHistory_Call) Run(run func(ctx context.Context, missionHistory *entity.MissionHistory)) *MissionHistoryRepository_CreateMissionHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.MissionHistory))
	})
	return _c
}

func (_c *MissionHistoryRepository_CreateMissionHistory_Call) Return(_a0 *entity.MissionHistory, _a1 error) *MissionHistoryRepository_CreateMissionHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionHistoryRepository_CreateMissionHistory_Call) RunAndReturn(run func(context.Context, *entity.MissionHistory) (*entity.MissionHistory, error)) *MissionHistoryRepository_CreateMissionHistory_Call {
	_c.Call.Return(run)
	return _c
}

// ListMultipleModeMissionHistories provides a mock function with given fields: ctx, params
func (_m *MissionHistoryRepository) ListMultipleModeMissionHistories(ctx context.Context, params entity.ListMultipleMissionHistoriesParams) ([]entity.MissionHistory, error) {
	ret := _m.Called(ctx, params)

	var r0 []entity.MissionHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ListMultipleMissionHistoriesParams) ([]entity.MissionHistory, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ListMultipleMissionHistoriesParams) []entity.MissionHistory); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MissionHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ListMultipleMissionHistoriesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionHistoryRepository_ListMultipleModeMissionHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMultipleModeMissionHistories'
type MissionHistoryRepository_ListMultipleModeMissionHistories_Call struct {
	*mock.Call
}

// ListMultipleModeMissionHistories is a helper method to define mock.On call
//   - ctx context.Context
//   - params entity.ListMultipleMissionHistoriesParams
func (_e *MissionHistoryRepository_Expecter) ListMultipleModeMissionHistories(ctx interface{}, params interface{}) *MissionHistoryRepository_ListMultipleModeMissionHistories_Call {
	return &MissionHistoryRepository_ListMultipleModeMissionHistories_Call{Call: _e.mock.On("ListMultipleModeMissionHistories", ctx, params)}
}

func (_c *MissionHistoryRepository_ListMultipleModeMissionHistories_Call) Run(run func(ctx context.Context, params entity.ListMultipleMissionHistoriesParams)) *MissionHistoryRepository_ListMultipleModeMissionHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ListMultipleMissionHistoriesParams))
	})
	return _c
}

func (_c *MissionHistoryRepository_ListMultipleModeMissionHistories_Call) Return(_a0 []entity.MissionHistory, _a1 error) *MissionHistoryRepository_ListMultipleModeMissionHistories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionHistoryRepository_ListMultipleModeMissionHistories_Call) RunAndReturn(run func(context.Context, entity.ListMultipleMissionHistoriesParams) ([]entity.MissionHistory, error)) *MissionHistoryRepository_ListMultipleModeMissionHistories_Call {
	_c.Call.Return(run)
	return _c
}

// NewMissionHistoryRepository creates a new instance of MissionHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMissionHistoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MissionHistoryRepository {
	mock := &MissionHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
