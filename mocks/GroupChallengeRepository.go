// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "pixelix/entity"

	mock "github.com/stretchr/testify/mock"
)

// GroupChallengeRepository is an autogenerated mock type for the GroupChallengeRepository type
type GroupChallengeRepository struct {
	mock.Mock
}

type GroupChallengeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupChallengeRepository) EXPECT() *GroupChallengeRepository_Expecter {
	return &GroupChallengeRepository_Expecter{mock: &_m.Mock}
}

// CreateGroupChallenge provides a mock function with given fields: ctx, groupChallenge
func (_m *GroupChallengeRepository) CreateGroupChallenge(ctx context.Context, groupChallenge *entity.GroupChallenge) (*entity.GroupChallenge, error) {
	ret := _m.Called(ctx, groupChallenge)

	var r0 *entity.GroupChallenge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GroupChallenge) (*entity.GroupChallenge, error)); ok {
		return rf(ctx, groupChallenge)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GroupChallenge) *entity.GroupChallenge); ok {
		r0 = rf(ctx, groupChallenge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GroupChallenge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.GroupChallenge) error); ok {
		r1 = rf(ctx, groupChallenge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupChallengeRepository_CreateGroupChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupChallenge'
type GroupChallengeRepository_CreateGroupChallenge_Call struct {
	*mock.Call
}

// CreateGroupChallenge is a helper method to define mock.On call
//   - ctx context.Context
//   - groupChallenge *entity.GroupChallenge
func (_e *GroupChallengeRepository_Expecter) CreateGroupChallenge(ctx interface{}, groupChallenge interface{}) *GroupChallengeRepository_CreateGroupChallenge_Call {
	return &GroupChallengeRepository_CreateGroupChallenge_Call{Call: _e.mock.On("CreateGroupChallenge", ctx, groupChallenge)}
}

func (_c *GroupChallengeRepository_CreateGroupChallenge_Call) Run(run func(ctx context.Context, groupChallenge *entity.GroupChallenge)) *GroupChallengeRepository_CreateGroupChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.GroupChallenge))
	})
	return _c
}

func (_c *GroupChallengeRepository_CreateGroupChallenge_Call) Return(_a0 *entity.GroupChallenge, _a1 error) *GroupChallengeRepository_CreateGroupChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupChallengeRepository_CreateGroupChallenge_Call) RunAndReturn(run func(context.Context, *entity.GroupChallenge) (*entity.GroupChallenge, error)) *GroupChallengeRepository_CreateGroupChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupChallengeRepository creates a new instance of GroupChallengeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupChallengeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupChallengeRepository {
	mock := &GroupChallengeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
