// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "pixelix/dto"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *UserService) CreateUser(ctx context.Context, req dto.CreateUserRequest) (*dto.CreateUserResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *dto.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateUserRequest) (*dto.CreateUserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateUserRequest) *dto.CreateUserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.CreateUserRequest
func (_e *UserService_Expecter) CreateUser(ctx interface{}, req interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, req)}
}

func (_c *UserService_CreateUser_Call) Run(run func(ctx context.Context, req dto.CreateUserRequest)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateUserRequest))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(_a0 *dto.CreateUserResponse, _a1 error) *UserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(context.Context, dto.CreateUserRequest) (*dto.CreateUserResponse, error)) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, req
func (_m *UserService) DeleteUser(ctx context.Context, req dto.DeleteUserRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.DeleteUserRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.DeleteUserRequest
func (_e *UserService_Expecter) DeleteUser(ctx interface{}, req interface{}) *UserService_DeleteUser_Call {
	return &UserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, req)}
}

func (_c *UserService_DeleteUser_Call) Run(run func(ctx context.Context, req dto.DeleteUserRequest)) *UserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.DeleteUserRequest))
	})
	return _c
}

func (_c *UserService_DeleteUser_Call) Return(_a0 error) *UserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_DeleteUser_Call) RunAndReturn(run func(context.Context, dto.DeleteUserRequest) error) *UserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ReadUser provides a mock function with given fields: ctx, req
func (_m *UserService) ReadUser(ctx context.Context, req dto.ReadUserRequest) (*dto.ReadUserResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *dto.ReadUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReadUserRequest) (*dto.ReadUserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ReadUserRequest) *dto.ReadUserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ReadUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ReadUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ReadUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadUser'
type UserService_ReadUser_Call struct {
	*mock.Call
}

// ReadUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.ReadUserRequest
func (_e *UserService_Expecter) ReadUser(ctx interface{}, req interface{}) *UserService_ReadUser_Call {
	return &UserService_ReadUser_Call{Call: _e.mock.On("ReadUser", ctx, req)}
}

func (_c *UserService_ReadUser_Call) Run(run func(ctx context.Context, req dto.ReadUserRequest)) *UserService_ReadUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ReadUserRequest))
	})
	return _c
}

func (_c *UserService_ReadUser_Call) Return(_a0 *dto.ReadUserResponse, _a1 error) *UserService_ReadUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_ReadUser_Call) RunAndReturn(run func(context.Context, dto.ReadUserRequest) (*dto.ReadUserResponse, error)) *UserService_ReadUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, req
func (_m *UserService) UpdateUser(ctx context.Context, req dto.UpdateUserRequest) (*dto.UpdateUserResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *dto.UpdateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserRequest) (*dto.UpdateUserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserRequest) *dto.UpdateUserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UpdateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.UpdateUserRequest
func (_e *UserService_Expecter) UpdateUser(ctx interface{}, req interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, req)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(ctx context.Context, req dto.UpdateUserRequest)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UpdateUserRequest))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(_a0 *dto.UpdateUserResponse, _a1 error) *UserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_UpdateUser_Call) RunAndReturn(run func(context.Context, dto.UpdateUserRequest) (*dto.UpdateUserResponse, error)) *UserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
