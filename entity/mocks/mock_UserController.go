// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// UserController is an autogenerated mock type for the UserController type
type UserController struct {
	mock.Mock
}

type UserController_Expecter struct {
	mock *mock.Mock
}

func (_m *UserController) EXPECT() *UserController_Expecter {
	return &UserController_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: c
func (_m *UserController) CreateUser(c *gin.Context) {
	_m.Called(c)
}

// UserController_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserController_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - c *gin.Context
func (_e *UserController_Expecter) CreateUser(c interface{}) *UserController_CreateUser_Call {
	return &UserController_CreateUser_Call{Call: _e.mock.On("CreateUser", c)}
}

func (_c *UserController_CreateUser_Call) Run(run func(c *gin.Context)) *UserController_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *UserController_CreateUser_Call) Return() *UserController_CreateUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_CreateUser_Call) RunAndReturn(run func(*gin.Context)) *UserController_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// ReadUser provides a mock function with given fields: c
func (_m *UserController) ReadUser(c *gin.Context) {
	_m.Called(c)
}

// UserController_ReadUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadUser'
type UserController_ReadUser_Call struct {
	*mock.Call
}

// ReadUser is a helper method to define mock.On call
//   - c *gin.Context
func (_e *UserController_Expecter) ReadUser(c interface{}) *UserController_ReadUser_Call {
	return &UserController_ReadUser_Call{Call: _e.mock.On("ReadUser", c)}
}

func (_c *UserController_ReadUser_Call) Run(run func(c *gin.Context)) *UserController_ReadUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *UserController_ReadUser_Call) Return() *UserController_ReadUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_ReadUser_Call) RunAndReturn(run func(*gin.Context)) *UserController_ReadUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: c
func (_m *UserController) UpdateUser(c *gin.Context) {
	_m.Called(c)
}

// UserController_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserController_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - c *gin.Context
func (_e *UserController_Expecter) UpdateUser(c interface{}) *UserController_UpdateUser_Call {
	return &UserController_UpdateUser_Call{Call: _e.mock.On("UpdateUser", c)}
}

func (_c *UserController_UpdateUser_Call) Run(run func(c *gin.Context)) *UserController_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *UserController_UpdateUser_Call) Return() *UserController_UpdateUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserController_UpdateUser_Call) RunAndReturn(run func(*gin.Context)) *UserController_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserController interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserController creates a new instance of UserController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserController(t mockConstructorTestingTNewUserController) *UserController {
	mock := &UserController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
